{"version":3,"sources":["utils.js","candy_components/CandyDisplay.js","candy_components/PlayAgain.js","candy_components/PlayNumber.js","candy_components/NumberDisplay.js","candy_components/Game.js","App.js","reportWebVitals.js","index.js"],"names":["utils","sum","arr","reduce","acc","curr","range","min","max","Array","from","length","_","i","random","Math","floor","randomSumIn","sets","sums","j","len","candidateSet","concat","candidateSum","push","module","exports","colors","available","used","wrong","candidate","CandyDisplay","props","count","map","startId","className","PlayAgain","style","color","gameStatus","onClick","PlayNumber","backgroundColor","status","number","NumberDisplay","useState","availableNums","setAvailableNums","candidateNums","setCandidateNums","secondsLeft","setSecondsLeft","useEffect","timerId","setTimeout","clearTimeout","candidatesAreWrong","candyCount","onNumberClick","currentStatus","newCandidateNums","filter","cn","newAvailableNums","n","includes","setCandies","resetGame","numId","Game","candies","startNewGame","App","gameId","setGameId","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e327d75c.chunk.js","sourcesContent":["const colors = {\r\n  available: 'lightgray',\r\n  used: 'lightgreen',\r\n  wrong: 'lightcoral',\r\n  candidate: 'deepskyblue',\r\n};\r\n\r\n// Math science\r\nconst utils = {\r\n  // Sum an array\r\n  sum: arr => arr.reduce((acc, curr) => acc + curr, 0),\r\n\r\n  // create an array of numbers between min and max (edges included)\r\n  range: (min, max) => Array.from({ length: max - min + 1 }, (_, i) => min + i),\r\n\r\n  // pick a random number between min and max (edges included)\r\n  random: (min, max) => min + Math.floor(Math.random() * (max - min + 1)),\r\n\r\n  // Given an array of numbers and a max...\r\n  // Pick a random sum (< max) from the set of all available sums in arr\r\n  randomSumIn: (arr, max) => {\r\n    const sets = [[]];\r\n    const sums = [];\r\n    for (let i = 0; i < arr.length; i++) {\r\n      for (let j = 0, len = sets.length; j < len; j++) {\r\n        const candidateSet = sets[j].concat(arr[i]);\r\n        const candidateSum = utils.sum(candidateSet);\r\n        if (candidateSum <= max) {\r\n          sets.push(candidateSet);\r\n          sums.push(candidateSum);\r\n        }\r\n      }\r\n    }\r\n    return sums[utils.random(0, sums.length - 1)];\r\n  },\r\n};\r\n\r\nmodule.exports = { \r\n  utils,\r\n  colors\r\n};","import { utils } from \"../utils\";\r\n\r\nconst CandyDisplay = props => (\r\n    <>\r\n        { \r\n        utils.range(1, props.count)\r\n            .map(startId => <div key={startId} className=\"candy\" /> )\r\n        }\r\n    </>\r\n);\r\n\r\nexport default CandyDisplay;","\r\nconst PlayAgain = props => (\r\n\t<div className=\"game-done\">\r\n  \t<div \r\n      className=\"message\"\r\n      style={{ color: props.gameStatus === 'lost' ? 'red' : 'green'}}\r\n    >\r\n  \t  {props.gameStatus === 'lost' ? 'Game Over' : 'Nice'}\r\n  \t</div>\r\n\t  <button onClick={props.onClick}>Play Again</button>\r\n\t</div>\r\n);\r\n\r\nexport default PlayAgain;","import { colors } from \"../utils\";\r\n\r\nconst PlayNumber = props => (\r\n    <button\r\n        className=\"number\"\r\n        style = {{ backgroundColor : colors[props.status]}}\r\n        onClick={() => props.onClick(props.number, props.status)}>\r\n       {props.number}\r\n    </button>\r\n);\r\n\r\nexport default PlayNumber;","import { useState, useEffect } from \"react\";\r\nimport { utils } from \"../utils\";\r\nimport PlayAgain from \"./PlayAgain\";\r\nimport PlayNumber from \"./PlayNumber\";\r\n\r\nconst NumberDisplay = props => {\r\n  const [availableNums, setAvailableNums] = useState(utils.range(1, 9));\r\n  const [candidateNums, setCandidateNums] = useState([]);\r\n  //introduce timer\r\n  const [secondsLeft, setSecondsLeft] = useState(10);\r\n\r\n\tuseEffect(() => {\r\n  \tif (secondsLeft > 0 && availableNums.length > 0) {\r\n      const timerId = setTimeout(() => {\r\n\t      setSecondsLeft(secondsLeft - 1);\r\n      }, 1000);\r\n    \treturn () => clearTimeout(timerId);\r\n  \t}\r\n  });  \r\n\r\n  //evaluate button status\r\n  const candidatesAreWrong = utils.sum(candidateNums) > props.candyCount; \r\n  const gameStatus = availableNums.length === 0 \r\n  \t? 'won'\r\n    : secondsLeft === 0 ? 'lost' : 'active'  \r\n\r\n  const numberStatus = number => {\r\n    if(!availableNums.includes(number)) {\r\n      return 'used';\r\n    }\r\n    if(candidateNums.includes(number)) {\r\n      return candidatesAreWrong ? 'wrong' : 'candidate';\r\n    }\r\n    return 'available';\r\n  }\r\n\r\n  const onNumberClick = (number, currentStatus) => {\r\n    if(gameStatus !== 'active' || currentStatus === 'used')  {\r\n      return;\r\n    }\r\n\r\n    //generate new candidate array\r\n    const newCandidateNums = \r\n      currentStatus === 'available' ? candidateNums.concat(number) : candidateNums.filter(cn => cn!== number);\r\n    if(utils.sum(newCandidateNums) !== props.candyCount){\r\n      setCandidateNums(newCandidateNums);\r\n    }else{\r\n      const newAvailableNums =  availableNums.filter(\r\n        n => !newCandidateNums.includes(n)\r\n      );\r\n\r\n      //redraw the stars which are playable\r\n      props.setCandies(utils.randomSumIn(newAvailableNums, 9));\r\n      setAvailableNums(newAvailableNums);\r\n      setCandidateNums([]);\r\n    }\r\n  }\r\n\r\n  if(gameStatus !== 'active'){\r\n    return (\r\n      <>\r\n        <PlayAgain onClick={props.resetGame} gameStatus={gameStatus} />\r\n      </>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <>\r\n    <div>\r\n          {\r\n            utils.range(1, 9)\r\n                 .map( numId =>\r\n                      <PlayNumber \r\n                      key={numId} \r\n                      status = {numberStatus(numId)}\r\n                      number={numId}\r\n                      onClick={onNumberClick}/>\r\n                     )\r\n          }\r\n          \r\n    </div>\r\n    <div className=\"timer h5\">Time Remaining:  {secondsLeft}</div> \r\n    </>\r\n  );\r\n};\r\n\r\nexport default NumberDisplay;","import { useState } from 'react';\r\nimport { utils } from \"../utils\";\r\nimport CandyDisplay from './CandyDisplay';\r\nimport NumberDisplay from './NumberDisplay';\r\n\r\n\r\nconst  Game = props=> {\r\n  const [candies, setCandies] = useState(utils.random(1, 9));\r\n  return ( \r\n    <div className=\"game p-2\">\r\n      <div className=\"help text-primary h5\">\r\n        Pick 1 or more numbers that sum to the number of candies\r\n      </div>\r\n      <div className=\"body\">\r\n        <div className=\"left\"> \r\n          <CandyDisplay count={candies}/>\r\n        </div>\r\n        <div className=\"right\">\r\n          <NumberDisplay\r\n             candyCount={candies}\r\n             setCandies={setCandies}\r\n             resetGame={props.startNewGame}/>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Game;","import { useState } from 'react';\r\nimport './App.css';\r\nimport Game from './candy_components/Game';\r\n\r\nfunction App() {\r\n  const [gameId, setGameId] = useState(1);\r\n\treturn <Game key={gameId} startNewGame={() => setGameId(gameId + 1)}/>;\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}